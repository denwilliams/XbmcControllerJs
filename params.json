{"name":"XbmcControllerJs","tagline":"JavaScript library that makes it easy to talk to XBMC via the JSON API using Websockets, with a fallback to the HTTP API. Note: HTTP API currently requires the JSON RPC 2.0 jQuery plugin (https://github.com/datagraph/jquery-jsonrpc), and subsequently jQuery. Later versions will be fully self contained.","body":"### Components\r\nXbmcControllerJs consists of 3 main components/classes:\r\n\r\n* XbmcWebSocketsApi\r\n* XbmcHttpApi\r\n* XbmcController\r\n\r\nXbmcController uses the other two classes. Typically you will only need to use XbmcController, but it is possible to communicate with XbmcWebSocketsApi or XbmcHttpApi directly.\r\n\r\n#### XbmcController\r\n\r\nUsage:\r\n\r\n```\r\nvar xbmc = new XbmcController(); // automatically determines websockets or http\r\nxbmc.Application.SetMute({mute:true});\r\n```\r\n\r\n#### XbmcWebSocketsApi & XbmcHttpApi\r\n\r\nBoth classes follow the same interface. The only difference between the two is the notifications that can be subscribed to.\r\n\r\nUsage:\r\n\r\n```\r\nvar xbmcWs = new XbmcWebSockets('192.168.0.10'); // <-- XBMC IP or Hostname\r\nxbmc.subscribe('Application.OnVolumeChanged',onVolChanges);\r\nxbmcWs.call('Application.SetMute',{mute:true}); // <-- will cause onVolChanged to be called\r\nxbmcWs.unsubscribe('Application.OnVolumeChanged',onVolChanges);\r\n\r\nfunction onVolChanged(response) {\r\n    console.log('New volume is '+reponse.volume);\r\n    console.log('New mute is '+response.mute);\r\n}\r\n```\r\n\r\n### Authors and Contributors\r\nWritten by Den Williams (@denwilliams)\r\n\r\nWith a couple of snippets taken from the following projects:\r\n* https://github.com/bailus/XBMC-Simple-Remote - by (@bailus)\r\n* https://github.com/lucifurious/jquery-xbmc - by (@lucifurious)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}